
03 nov 2015
   - Met with Julie Makani regarding plans and desired projects; abstract requested
   - first draft abstract

04 nov 2015
   - abstract submitted to Julie Makani and copied to Keith Dunker
   - get PDB and Pisces mirrors updated on Synology NAS, bounce crond

08 nov 2015
   - expand abstract for Julie to hve background, objectives, methods, anticipated outcomes

09 nov 2015
   - submit abstract 2 to Julie
   - compile dssp on mac - does not do side chains
   - fire still 32 bit, need to reinstall linux - appears 64bit luaJIT ok now

10 nov 2015
   - fire set up as 64 bit
   - installed torch
   - tensorflow released, installed
   
12 nov 2015
   - dssp chi1 implemented but not checked.  based on http://www.zucic.org/garlic/commands/dihedrals.html ( http://www.msg.ucsf.edu/local/programs/garlic/commands/dihedrals.html )

13 nov 2015
   - dssp chi2, chi3, chi4, chi5 implemented
   - checked on 7rsa arg 39, seems ok for 0 degree definitions
   -- next is deciding output format, feed to buildprot
   - got buildprot compiled on mac, new Makefile
   -- backbone only

14 nov 2015
   - lay out data structure ideas atom->angles
   - list some use cases

17 nov 2015
   - read dill paper on kinematic loop closure
   -- suspect main benefit may be description of peptide plane rotation
   
19 nov 2015
   - get disgro paper and software - later than dill, C++
   
20 nov 2015
   - start notes on manipulators and evaluators
   
21 nov 2015
   - more notes on manipulators and evaluators
   
24 nov 2015
   - investigate ballview - bal writes trajectory files but does not appear to visualise?
   - get vmd - reads gromacs trajectory files

27 nov 2011
   - reading about GPUs and convolutional neural networks - http://timdettmers.com/2014/08/14/which-gpu-for-deep-learning/ and others especially on this site

28 nov 2015
   - more in-depth convolutional nets :  http://cs231n.github.io/convolutional-networks/ -- focused on images, but description much more amenable to residue environments

29 nov 2015
   - thinking about outputs as classification, e.g. 20 aas for c-alpha, specific side chain dihedrals
   - also possibly each 3-atom plane in dihedral and then put rotation bond along one axis, rotate +/- about that axis few degrees for training
   -- not clear how this would sample all conformations ... but it must, just without kinematics - but if just clock 1 degree or so at a time, or 1 degree if see gradient from 1 degree to 2 degrees; evaluate all positions then move
   - reading on torch7, tensorflows; nothing clear yet about architecture that would alllow separate output layers e.g. one for each class (because worry that bad for res X might be ok for res Y - e.g. gly - and output training only for res X).
   
30 nov 2015
   - for rotations of dihedral planes, add system to rotate back the next angle or two to minimse displacement of levered atom
   - also add statistics on each dihedral to (primarily) make it so don't adjust omega angles outside observed ranges
   
03 feb 2016
   - have been working on collect module, designing build
   - remember to run on fire !  installed lua-postgres with:
   luarocks install luadbi-postgresql POSTGRES_INCDIR=/usr/include/postgresql
   luarocks install luasql-postgres PGSQL_INCDIR=/usr/include/postgresql/
   - think lua on fire now talking to postgres on fire
   - wrote bin/rfsync on fire, uses unison
   -- not happy, new plan is:
   proj/rFold -- on fire, mount from nova
   proj/rFold-nova -- on nova, rfsync will unison here.

01 mar 2016
   - added routines to rtmDSSP to print internal coordinates for each residue to Cbeta (no side chain yet) -- bond lengths, angles, dihedrals.
   -- should now be able to read into db and then try to reproduce 3d coordinates -- all in DSSP output

02 mar 2016
   - work on lua parser for rtm dssp output with internal coordinates
   
03 mar 2016
   - finish up lua parser for rtm dssp output with internal coordinates
   - start on buildprot ...
   - install 'numeric lua', however not as documented or indicated in messages -- needed:
   -- luarocks make numlua-0.3-1.rockspec HDF5_INCDIR="/usr/include/hdf5/serial/" HDF5_LIBDIR="/usr/lib/x86_64-linux-gnu/hdf5/serial"
   -- oops had to fix numlua.h, add:
   #if LUA_VERSION_NUM <= 501
   +#define lua_number2int(i,n) ((i)=(int)(n))
   --- as per github
   
06 mar 2016
   - past few days on buildprot (bp1.lua)
   - seems straightforward porting of coordSpace work from past to now
   - changed dssp to putput O coordinates as well, but current work does not handle sidechains beyond cb

08 mar 2016
   - finished initial implementation bp1.c for backbone and c-beta; many positions work, some errors

09 mar 2016
   - cleared errors, all generated dihedrals match 4th atom to x.0e-05 -- not translated back to chain, so not cumulative

13 mar 2016
   - write but not test generation of side chain internal coordinates in rtmDSSP
   
18 mar 2016
   - re-work generation of side chain internal coordinates to fix compile errors, make more robust to missing atoms

21 mar 2016
   - get installation working on xub vm, ready for travels next week.

04 apr 2016
   - during travels only outlined algorithm for buildprot version 2 and studied OO implementations in Lua
   - installed and debugged Lumen for potential use in parallel processing (for buildprot)

05 apr 2016
   - initial implementation - just loading - bp2.lua, protein.lua

06 apr 2016
   - protein.lua importing bp1 steps

07 apr 2016
   - add redundant n-ca-cb hedron to rtm-dssp output because chi1 defined from N and defined all side chains using chi1 (could have used c-ca-cb already present)

12 apr 2016
   - reworking protein.lua a bit to place atom coordinates in dihedron objects
   - got to printing PDB atom records, but not yet assembling residues or chains from dihedrons

07 may 2016
   - can generate 1st residue (7rsa lys 1)  with correct coordinates starting from  n-ca-c coords from pdb file

08 may 2016
   - can generate all residues PDB for 7rsa and 1mud, currently only off by 0.001 on some axes for atoms in final residues

09 may 2016
   - increased dssp measurement outputs to 5 decimal places, plus fixes to tyr and trp sidechains, add oxt, remove gly c-beta from pdb output -- now get exact match for all atom records for 1mud (225 residues)
   
10 may 2016
   - review and cleanup with eye to release
   -- install penlight, ldoc (dependencies luafilesystem, markdown)

11 may 2016
   - refactoring and documenting files to be more appropriate for distribution
   -- think just hedron and dihedron classes left

12 may 2016
   - finished all classes for documentation, not running yet

13 may 2016
   - working on getting code working again

14 may 2016
   - can generate 1mud pdb file again

25 may 2016
   - can read PDB file, generate internal coordinates output, read that output in, generate new PDB file, exact match on original PDB file (diff, 1mud 225 residues)

28 may 2016
   - got -t test working both ways for 1mud

30 may 2016
   - implement support for missing (disordered) residues
   - works for 3egw 3 chains 1244 / 509 / 224 residues
   - works for 4lgy 1 chain, 1287 residues, starts at -9, missing sidechains, missing residues, 1 non-standard residue treated as chain break
   
01 june 2016
   - -f working for PISCES input list, various tweaks to get all the way through

08 june 2016
   - documentation, license, get ready for github release

10 june 2016
   - released to github
   -- to update docs, select master, copy docs to dir above, switch to gh-pages, copy ../docs ., commit and push

22 aug 2016
   - finished with holiday travels, back to work!
   - need to continue with 'collect': determine bond lengths and angles, see if 3d-printed peptide models can help understand 'move' part of project; also investigating effect of residue pairs on bond lengths, angles
   
23 sep 2016
   - started rFoldLoadDB.lua ro read pdb / pic into database
   - making rfPostgresql.lua part of rFold and more portable
   - try to make dssp read from stdin

24 sep 2016
   - mkdssp reading from stdin as option
   - installed luaposix library (also on vm)
   - got rFoldLoadDB.lua testing/accepting 3 kinds of input : pdb, pic, dssp
   -- next to load into database
   
24 oct 2016
   - starting database load
   -- parser, protein.lua does not handle filename, added but not tested

26 oct 2016
   - pdb_chain table load implemented
   -- implemented handle pdb SEQRES records (no hetatms), not tested

18 jan 2017
  - finished 3D printer rebuild, xmas travels and events, back to work!
  - attempt to fix github detected language with .gitattributes, but apparently that documentation is wrong and it does not currently work
  - various cleanup and bug fixing to get buildProt working after minor refactoring and seqres work to create rFoldLoadDB.lua
  - cleanup and bug fixing to make rFoldLoadDB.lua work up to actually loading in db (tests read PDB and can recreate from internal coords and match rtm-dssp output)

24 jan 2017
   - work on collect
   -- refactor to separat chem data (mostly tables) from utils
   -- db initialisation work
   - need to set up current work as new branch in git

25 jan 2017
   - think fixed git to put new changes on dataCollect branch.  did not modify github although would have preferred to shift one commit back
   - checked db correct for atom_class, preiodic_table and atoms tables

27 jan 2017
   - working on enumerating hedra and dihedra for database, not clear...
   -- issue with bond direction and always getting consistent
   -- discovered enumerateResCompClasses.lua did most of what I did 24th/25th - but older.

01 feb 2017
   - re-worked schema, believe have deterministic enumeration of dihedrals and lower structures
   - ready to try load of data

02 feb 2017
   - still needed to enumerate sidechain angles and dihedrals above, done now
   - progress to working on chain.lua:writeDb()
   -- still need to add chain start coords (3x3 double) to database tables and load
   -- then per residue processing for residue table and store angle/bond data
   
19 feb 2017
   - start with Chain:writeDb ... difficult concentrating

22 feb 2017
   - progessing through chain:writeDb(), on to residue:writeDb().  Working on / starting on equivalent of protein:setStartCoords() 

22 mar 2017
   - completing writeDb() at hedron and dihedron levels but some part of init not complete? dihedron[res, hedron1, hedron2] not set ?

23 mar 2017
   - got through implementation of database load but no inspection of  data (testing) yet.
   -- problem yesterday was code ran parser a second time to load data from dssp pipe for testing - but had same pdbid so wiped first data.  solution: add routine to stash existing data structure under new name
   - started adding ldoc documentation for fields and tables in each class; hedron, dihedron mostly done, need residue, chain and protein

02 apr 2017
   - appear to have successful load of chain including init coordinates, next is residue
   -- also better handling / documentation of ordered/disordered
   -- also more fields documented - protein, chain, residue

03 apr 2017
   - completed implementation of dbLoad() routines
   -- discovered have been writing redundant N-Ca-Cb hedron for gly and ala residues, db code misses this because only generates hedra needed for dihedra
   --- required same change in dssp
   --- further change on both to handle missing sidechain atoms (nothing in gamma position) 
   -- appears to pass db load - extract - compare test for 4lgy (disordered regions, missing atoms), 3egw (multi chains), 7rsa, 1mud

04 apr 2017
   - clean up reporting, testing on rFoldLoadDB
   - fix dunbrack and pdb mirrors, updating now
   
06 apr 2017
   - finished dataCollect so goes through Dunbrack PISCES 2.0_pc20 list without crashing, loads 93%
   - merged dataCollect branch into master
   - pushed dataCollect and master to github
   - starting genSCAD branch locally

13 apr 2017
   - catch up:  initial version genSCAD working, just static structures, 11 april 2017.  stl file takes openSCAD 7-8 hrs to generate on fire, did not complete on mac.
   -- electricity problem during print causd failure, but bond radius too small anyway for print resolution.  Made better but have not tried printing yet.
   - update fire to Ubuntu 16.10 - largely driven by openSCAD complaint of OpenGL 1.4 insead of 2.0
   -- nvidia drivers 3.75
   -- updating torch
   -- updated netatalk
   -- openscad coredumps, not able to initialize openGL at all ... but command line version appears to run
   -- naturally toch all fucked up too
   -- luajit seems to be working

16 apr 2017
   - lots of thinking about peptide scad design whilst on holiday
   - back trying to build / install torch
   -- looks like nvcc (package nvidia-cuda-toolkit) is a good thing to have installed - brings in lots of deps, looks to match driver 7.5

17 apr 2017
   - finally back to running rFold lua code but cutorch / cunn tests in torch.notes failing

18 apr 2017
   - adding -DCUDA_TOOLKIT_ROOT_DIR="/usr/local/cuda" to failing cmake commands got them working and was able to proceed from there.

26 april 2017
   - been away to play with 3d printer!
   - needed to install numlua, luadbi, luasql - see full commands above
   - yay! rfDb.lua (and relevant classes) can gen average pic data and stats for selected residues
   -- Ala in internal helix positions:  ./rfDb.lua -s -rs="\"select d.res_id from residue r, dssp d where r.res='A' and r.res_id=d.res_id and d.struc='H' and d.struc2=' X S+   '\""

27 apr 2017
   - commit yesterday's work for average structures in genSCAD branch
   - need to add support for Hydrogens, at least backbone proton
   - needed to install posix -- luarocks install luaposix

06 may 2017
   - much more work to get average data written as .pic file and then read into rfGenSAD, but working now
   - got chain:writeSCAD and peptide.scad so can generate peptide as series of joined amide planes
   -- next to tweak peptide.scad output to make amide planes with cylinder ends and NCaC joiner units
   - ok, have finished initial single amide unit with C-alpha joiner, ready to try printing tomorrow!
   
07 may 2017
   - initial printing shows have more to do with sizes around rotating bonds vs. smallest wall printer can manage
   - also need to print joiners separately from amide units for support and ease of printing
   -- therefore reworking to have:
   --- peptideOffsets.scad = variables which index array for pdbid to get chain, hedra, residue, amide etc
   --- peptide.scad will 'use' those variables to reference variables in datafile
   --- <pdbid>coords.scad is datafile
   --- 'work' files will use/include above to implement specific tasks, e.g. create joiners; create amides; create segments

21 aug 2017
   - long break due to filament absorbing water, building filament dryer, hernia
   - in june worked on making system run on vm on laptop to continue while sitting in UK

29 aug 2017
   - depressed.  hard to start
   - met with Daniel Maeda, goal to present work after November term start

30 aug 2017
   - not clear how to create commands / options to satisfy 3d printing ideas, goal now to generate openscad routines, essentially an openscad library with dataset from protein structure
   - turns out amide proton not planar everywhere! helix different than sheet different than average
   -- will try modelling average structures first to see, then probably use helix ans canonical if H's not present?

31 aug 2017
   - working steadily on openscad to generate models.
   -- look at spep2, there is a problem matching second residue to first .. transform matrices not correct.


18 sep 2017
   - did work on getting printing of s-peptide working, first success in PETG was using meshmixer to generate supports and scale 250%
   - break now for hernia operation


---------------------

05 jan 2019
   - hernia operation, holidays, 2nd 3d printer, trip to Idaho to clear Mom's house, trip to Idaho when Mike (my brother) died, incorporate new equipment from Mike, build new PC with 3 1080Ti GPUs
   - Torch switched to maintenance mode so need new framework - but none use Lua
   - think will switch to python, try to pur protein internal coordinates work into BioPython
   - start with just parsing files, see how bad the speed hit is
   - needed to install numlua with (notes above), luaposix (sudo luarocks install luaposix)
   -- using ubuntu luajit, so sudo luarocks
   -- startlua.sh has path settings, now:

export LUA_PATH='/usr/local/lib/luarocks/rocks/?.lua;/usr/local/share/lua/5.1/?.lua;/usr/local/share/lua/5.1/?/init.lua;/home/rob/proj/rFold/lualib/?.lua'
export LUA_CPATH='/usr/local/lib/lua/5.1/?.so;/usr/local/lib/luarocks/rocks/?.so;/home/rob/proj/rFold/lualib/?.so'

   - got readPdbList.py working, just parses - nice I don't need to deal with uncompressing
   - PDB and picsces mirrors still running as of today
   
   
29 Jan 2019
   - turns out readPdbList.py was not working, compressed files were silently failing under Python2 but erroring on Python3.  All moving to Python3 so that is the target
   - read Python Tricks book, bounced around Biopython, current targets:
   -- just internal coordinate chain, residue, dihedra, hedra classes initially, can be separate from PDB chain/residue/atom but refer to them
   -- could start with parsing in .pic file

01 feb 2019
   - working on git stuff...
   -- recovered .git files from fire/hal, issue was CloudStation not set to sync dot-files
   -- checked out local Biopython under proj/
   --- made my branch rtm-pic and pushed
   --- rebase to keep updated:
   ---- git checkout master           (switch to master branch locally)
   ---- git pull upstream master      (upstream already configured to Biopython main, this gets all changes locally)
   ---- git push origin master        (push the updated master to github.com/rob-miller public master branch)
   ---- git checkout rtm-pic          (back to my branch locally - always do this, never work on master)
   ---- git rebase upstream/master    (make it like rtm-pic is branch of current upstream/master)
   ---- git push origin rtm-pic --force   (assuming the rebase was ok (else 'git rebase --abort'), force rob's github version to match the local rebase'd one) 
   --- see https://biopython.org/wiki/GitUsage
   -- very useful: https://www.sbf5.com/~cduan/technical/git/
   
02 feb 2019
   - git push origin rtm-pic           (update my branch on githb)
   - added idcode to PDB/parse_pdb_header.py
   -- but really should have this minor change tagged under different branch?
   - removed released Biopython 1.73 and switched to my local version, monitoring changes to tree
   -- python3 -m pip install -e /Users/rob/proj/biopython
   --- was important that I used python3 then both command line and pycharm happy with it
   - got reading pdb files the way I think I want
   - pic files not getting atoms right....
   
